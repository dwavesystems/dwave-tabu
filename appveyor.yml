environment:
  # PyPI login
  TWINE_USERNAME: dwtools
  TWINE_PASSWORD:
    secure: 9/YAQhmz9Kb1ZeXzhBYeQA==

  matrix:
    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python37"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python38"
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python39"
      PYTHON_VERSION: "3.9.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python39-x64"
      PYTHON_VERSION: "3.9.x"
      PYTHON_ARCH: "64"

install:
  # Check that we have the expected version and architecture for Python
  - "%PYTHON%\\python.exe --version"
  - "%PYTHON%\\python.exe -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "%PYTHON%\\python.exe -c \"import platform; print(platform.machine())\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "%PYTHON%\\python.exe -m pip install --upgrade pip setuptools"

  - "%PYTHON%\\python.exe -m pip install wheel twine"

  - "set PIP_PREFER_BINARY=yes"
  - "%PYTHON%\\python.exe -m pip install dwave-tabu"

  # Install dependencies
  - "%PYTHON%\\python.exe -m pip install -r requirements.txt -r tests\\requirements.txt"

build_script:
  # Build the compiled extension
  - "%PYTHON%\\python.exe setup.py build_ext --inplace"

test_script:
  - "%PYTHON%\\python.exe -m unittest discover"

after_test:
  # If tests are successful, create binary packages for the project.
  - "%PYTHON%\\python.exe setup.py bdist_wheel"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

deploy_script:
  - cmd: "if [%APPVEYOR_REPO_TAG%]==[true] %PYTHON%\\Scripts\\twine upload --skip-existing dist\\*.whl"
